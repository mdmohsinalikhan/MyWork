1. Calling conventions (4 points)
---------------------------------

Study the disassembly below produced with IDA Pro. Comments have been removed, and displaying relative change to stack pointer has been enabled (these settings can be changed in IDA Pro from Options -> General -> Disassembly tab). 

.text:00401030     sub_401030      proc near
.text:00401030
.text:00401030 000                 push    ebp
.text:00401031 004                 mov     ebp, esp
.text:00401033 004                 push    0
.text:00401035 008                 push    4020D8h
.text:0040103A 00C                 mov     eax, [ebp+8]
.text:0040103D 00C                 push    eax
.text:0040103E 010                 push    0
.text:00401040 014                 call    ds:MessageBoxW
.text:00401046 004                 push    2Ah
.text:00401048 008                 push    offset Format
.text:0040104D 00C                 call    ds:wprintf
.text:00401053 00C                 add     esp, 8
.text:00401056 004                 mov     ecx, [ebp+14h]
.text:00401059 004                 push    ecx
.text:0040105A 008                 mov     edx, [ebp+10h]
.text:0040105D 008                 push    edx
.text:0040105E 00C                 mov     edx, 2Ah
.text:00401063 00C                 mov     ecx, [ebp+0Ch]
.text:00401066 00C                 call    sub_401000
.text:0040106B 004                 pop     ebp
.text:0040106C 000                 retn
.text:0040106C     sub_401030      endp


Answer the following questions based on your analysis.

1. Which calling convention does MessageBoxW use: cdecl, stdcall or Microsoft fastcall? Justify your answer. (0.5 points)
2. Which calling convention does wprintf use: cdecl, stdcall or Microsoft fastcall? Justify your answer. (0.5 points)
3. Which calling convention does sub_401000 use: cdecl, stdcall or Microsoft fastcall? Justify your answer. (1 point)
4. How many parameters are passed to sub_401000? (1 point)
5. How many parameters are passed to sub_401030? What is the type of the first/leftmost parameter? (1 point)


2. C compilers and structures, representing data (4 points)
-----------------------------------------------------------

Definition of WIN32_FIND_DATA structure is as follows (http://msdn.microsoft.com/en-us/library/windows/desktop/aa365740(v=vs.85).aspx):

typedef struct _WIN32_FIND_DATA {
  DWORD    dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD    nFileSizeHigh;
  DWORD    nFileSizeLow;
  DWORD    dwReserved0;
  DWORD    dwReserved1;
  TCHAR    cFileName[MAX_PATH];
  TCHAR    cAlternateFileName[14];
} WIN32_FIND_DATA, *PWIN32_FIND_DATA, *LPWIN32_FIND_DATA;

with FILETIME (http://msdn.microsoft.com/en-us/library/windows/desktop/ms724284(v=vs.85).aspx) being defined as:

typedef struct _FILETIME {
  DWORD dwLowDateTime;
  DWORD dwHighDateTime;
} FILETIME, *PFILETIME;

The following memory dump contains a valid WIN32_FIND_DATA structure starting at 0x0028FB48.

0x0028FB48  20 00 00 00 4b 27 ac 7e   ...K'╛~
0x0028FB50  81 16 cf 01 4b 27 ac 7e  ..о.K'╛~
0x0028FB58  81 16 cf 01 00 f2 4d a0  ..о..РM═
0x0028FB60  d9 70 ce 01 00 00 00 00  ыpн.....
0x0028FB68  c0 dd 14 00 cc cc cc cc  ющ..лллл
0x0028FB70  cc cc cc cc 41 00 61 00  ллллA.a.
0x0028FB78  6c 00 74 00 6f 00 2e 00  l.t.o...
0x0028FB80  65 00 78 00 65 00 00 00  e.x.e...

1. Is the data stored in memory using little-endian or big-endian convention? Justify your answer. (1 point)
2. What is the value of cFileName in the dump? (1 point)
3. What is the value of ftCreationTime in human-readable (i.e. DD.MM.YYYY) format? (2 point)

Hint:
* FILETIME conversion: http://www.silisoftware.com/tools/date.php


3. Reverse engineering with IDA Pro (6 points)
----------------------------------------------

Using IDA Pro 5.0 (http://www.hex-rays.com/idapro/idadownfreeware.htm), analyze sample hw1ex3.bin and answer the questions below. The sample is not malicious.

1. What does the password generation algorithm use as an input? (2 points)
2. Describe password generation algorithm. (3 points)
3. What is the correct password? (1 point)

A few hints:

* You can run the application to check whether you have found the right password
* The application is written in C with Visual Studio 2010. There is no need to analyze all the code at the entrypoint generated by Visual Studio. Start your analysis from 00401820.
* MSDN is your friend (http://msdn.microsoft.com/en-us/library/windows/desktop/hh447209(v=vs.85).aspx)
* You may find the String subview useful (Shift+F12)
* You may find cross-references useful (http://dvlabs.tippingpoint.com/blog/2008/07/24/mindshare-cross-references-in-ida). 
* You may find Graph view useful (http://www.hex-rays.com/idapro/idadoc/42.shtml)


4. PE structure (5 points)
--------------------------

Answer the following questions based on PE executable hw1ex4.bin. The sample is not malicious. 

1. What sections does the file have?  Which sections seem to contain code? (1 point)
2. From which libraries does the file import symbols? Does it export symbols? (1 point)
3. The file contains resources. What information can you find about them from the PE header? (1 point)
4. The file has a digital signature. Who is the signer? Which field in the PE header includes information about where the signature data is? Is the signature valid? (1 point)
5. The file can't be executed. Why? Using a hex editor, fix the file to run on your Windows machine. What did you patch? Hint: check COFF header and optional headers. (1 point)

Hint: 

* If you want to view the signature details through the GUI, rename the file to .exe, right-click and select "Properties".


5. Effort (1 point)
-------------------

How many hours did you spend answering these questions? Do you think some questions were too easy or too difficult?